<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- enable Method level [vs URL level] authorization This work for APPLICATION 
		Level scanned components Does NOT recognize WEB level components - for THAT 
		need to place enable line in Dispatcher-servlet -->
	<security:global-method-security
		pre-post-annotations="enabled" />

	<!-- security:http enables security filter mechanism...name space configuration 
		is activated -->
	<!-- use-expressions enables URL level authorization -->
	<security:http use-expressions="true">
		<security:csrf disabled="true" />

		<security:intercept-url pattern="/**"
			access="hasRole('ROLE_ANONYMOUS')" />
		<!-- if non-standard ports for HTTP and/or HTTPS, you can specify them 
			here -->
		<!-- <security:port-mappings> <security:port-mapping http="8080" https="8443"/> 
			</security:port-mappings> -->
		<!-- We will just use web.xml error for access-denied -->
		<!-- Other Options to redirect exception for web authorization -->
		<!-- <security:access-denied-handler error-page="/error-forbidden" /> <security:access-denied-handler 
			ref="controllerExceptionHandler" /> -->

		<security:form-login/>
		<!-- Implemented with Web based URL - Controller "METHOD" level authorization -->
		<!-- the more specific rules need to come first, followed by the more general 
			ones. -->
		<!-- COMmENT out the following to see @Service METHOD level authorization -->
		<!-- <security:intercept-url pattern="/users/add"
			access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/"
			access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" /> -->
		<!-- Switch to HTTPS -->
		<!-- <security:intercept-url pattern="/login" access="isAnonymous()" requires-channel="https"/> 
			<security:intercept-url pattern="/logout" access="isAnonymous()" requires-channel="http"/> -->
		<!-- always-use-default-target overrides where login was triggered routes 
			to default-target-url -->
		<!-- logout-url renames j_security_logout URL -->
		<!-- similarly username,password,login-processing renames j_security_* 
			stuff -->
		<!-- e.g., /j_spring_security_check is default for login-processing-url -->
		<!-- Comment out login-page through logoinfailed for BASIC -->
		<!-- <security:form-login login-page="/login"
			default-target-url="/home" always-use-default-target="true"
			username-parameter="username" password-parameter="password"
			login-processing-url="/DoLogin" authentication-failure-url="/loginfailed" /> -->
		<!-- login-page="/login" -->
		<!-- login-processing-url="/postLogin" -->
		<!-- username-parameter="username" -->
		<!-- password-parameter="password" -->
		<!-- default-target-url="/welcome" -->
		<!-- always-use-default-target="true" -->
		<!-- authentication-failure-url="/loginfailed"/> -->
		<!-- <security:logout logout-success-url="/logout"
			logout-url="/doLogout" /> -->

		<!-- <security:form-login /> -->

		<!-- BY DEFAULT the URL /j_spring_security_logout triggers logout NOTE: 
			is it JUST a URL naming convention - no mapping occurs logout-url= "/doLogout" 
			REPLACES it -->
	</security:http>
	<!-- <security:authentication-manager> -->
	<!-- <security:authentication-provider> -->
	<!-- <security:password-encoder hash="bcrypt" /> -->
	<!-- <security:jdbc-user-service -->
	<!-- data-source-ref="dataSource" -->
	<!-- users-by-username-query="select username,password,enabled from users 
		where username=?" -->
	<!-- authorities-by-username-query="select u1.username, u2.authority from 
		users u1, authorities u2 where u1.username = u2.username and u1.username 
		=?" /> -->
	<!-- </security:authentication-provider> -->
	<!-- </security:authentication-manager> -->

	<security:authentication-manager>
		<security:authentication-provider
			ref="customAuth">
		</security:authentication-provider>
	</security:authentication-manager>

	<!--security:authentication-manager> <security:authentication-provider> 
		<password-encoder hash="bcrypt" /> <security:user-service> <security:user 
		name="admin" password="admin" authorities="ROLE_ADMIN" /> <security:user 
		name="guest" password="guest" authorities="ROLE_USER" /> </security:user-service> 
		</security:authentication-provider> </security:authentication-manager -->

</beans>
